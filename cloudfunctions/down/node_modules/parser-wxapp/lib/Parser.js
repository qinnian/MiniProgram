//Parser.js
const Tokenizer = require("./Tokenizer.js");
const DomHandler = require("./DomHandler.js");
const highlight = require('./highlight.js/lib/index.js');
const entities = require('./entities/index.js');
const request = require('./Request.js');
const trustAttrs = {
  albumurl: true,
  align: true,
  alt: true,
  author: true,
  autoplay: true,
  class: true,
  color: true,
  colspan: true,
  controls: true,
  data: true,
  "data-src": true,
  face: true,
  height: true,
  href: true,
  id: true,
  ignore: true,
  loop: true,
  mid: true,
  music_name: true,
  muted: true,
  name: true,
  poster: true,
  rowspan: true,
  scrolling: true,
  singer: true,
  span: true,
  src: true,
  start: true,
  style: true,
  type: true,
  value: true,
  width: true,
};
const voidTag = {
  area: true,
  base: true,
  basefont: true,
  br: true,
  col: true,
  command: true,
  embed: true,
  frame: true,
  hr: true,
  img: true,
  input: true,
  isindex: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true,
  path: true,
  circle: true,
  ellipse: true,
  line: true,
  rect: true,
  use: true,
  stop: true,
  polyline: true,
  polygon: true
};

function Parser(cbs, options, callback) {
  this._cbs = cbs;
  this._callback = callback;
  this._options = options;
  this._tagname = "";
  this._attribname = "";
  this._attribvalue = "";
  this._attribs = null;
  this._stack = [];
  this._tokenizer = new Tokenizer(this);
}
Parser.prototype.ontext = function (data) {
  data = entities.decodeHTML(data.replace(/\n/g, ''));
  this._cbs.ontext(data);
};
Parser.prototype.onopentagname = function (name) {
  name = name.toLowerCase();
  this._tagname = name;
  this._attribs = {
    style: ''
  };
  if (!voidTag[name]) this._stack.push(name);
};
Parser.prototype.onopentagend = function () {
  if (this._attribs) {
    this._cbs.onopentag(this._tagname, this._attribs);
    if (this._tagname == 'pre' && this._options.autohighlight) {
      var index = this._tokenizer._buffer.indexOf("</pre>", this._tokenizer._index);
      if (index == -1) index = this._tokenizer._buffer.length;
      var content = this._tokenizer._buffer.substring(this._tokenizer._index + 1, index);
      var html = highlight.highlightAuto(content).value.replace(/\n/g, '<br />');
      this._tokenizer._buffer = this._tokenizer._buffer.replace(content, html);
    }
    this._attribs = null;
  }
  if (voidTag[this._tagname]) this._cbs.onclosetag(this._tagname);
  this._tagname = "";
};
Parser.prototype.onclosetag = function (name) {
  name = name.toLowerCase();
  if (this._stack.length && !voidTag[name]) {
    var pos = this._stack.lastIndexOf(name);
    if (pos !== -1) {
      pos = this._stack.length - pos;
      while (pos--) this._cbs.onclosetag(this._stack.pop());
    } else if (name === "p") {
      this.onopentagname(name);
      this._closeCurrentTag();
    }
  } else if (name === "br" || name === "hr" || name === "p") {
    this.onopentagname(name);
    this._closeCurrentTag();
  }
};
Parser.prototype._closeCurrentTag = function () {
  var name = this._tagname;
  this.onopentagend();
  if (this._stack[this._stack.length - 1] === name) {
    this._cbs.onclosetag(name);
    this._stack.pop();
  }
};
Parser.prototype.onattribname = function (name) {
  this._attribname = name;
};
Parser.prototype.onattribdata = function (value) {
  this._attribvalue += value;
};
Parser.prototype.onattribend = function () {
  this._attribname = this._attribname.toLowerCase();
  this._attribvalue = this._attribvalue.replace(/&quot;/g, '"');
  if ((this._attribname == 'src' || this._attribname == 'href') && this._attribvalue[0] == '/') {
    if (this._attribvalue[1] == '/') this._attribvalue = (this._options.domain ? this._options.domain.split('//')[0] : 'http:') + this._attribvalue;
    else if (this._options.domain) this._attribvalue = this._options.domain + this._attribvalue;
  }
  if (this._attribs && trustAttrs[this._attribname])
    this._attribs[this._attribname] = this._attribvalue;
  this._attribname = "";
  this._attribvalue = "";
};
Parser.prototype.onend = async function () {
  for (
    var i = this._stack.length; i > 0; this._cbs.onclosetag(this._stack[--i])
  );
  try {
    for (var music of this._cbs._qqMusic) {
      var qqMusic = require('./qqMedia').qqMusic;
      music.attrs.src = await qqMusic(music.attrs.mid);
    }
    for (var frame of this._cbs._frames) {
      if (frame.children.length) continue;
      if (/v.qq.com/.test(frame.attrs.src) && /vid/.test(frame.attrs.src)) {
        var qqVideo = require('./qqMedia.js').qqVideo;
        var vid = frame.attrs.src.match(/vid=([^\&]*)/)[1];
        var src = await qqVideo(vid);
        delete frame.continue;
        frame.name = "video";
        frame.attrs.id = ("media" + (++this._cbs._mediaNum));
        frame.attrs.src = src;
        frame.attrs.source = [src];
      }
      else {
        var request = require('./Request.js');
        var html = await request(frame.attrs.src, this._options);
        var res = await html2nodes(html);
        frame.children = res.nodes;
        this._cbs.imgList.concat(res.imgList);
        this._cbs.videoNum += res.videoNum;
        delete frame.attrs.src;
      }
    }
  } catch (err) {
    console.error(err);
  }
  this._callback({
    'nodes': this._cbs.nodes,
    'title': this._tokenizer._title,
    'imgList': this._cbs.imgList
  });
};
Parser.prototype.write = function (chunk) {
  this._tokenizer.parse(chunk);
};

function html2nodes(data, options = {}) {
  return new Promise(async function (resolve, reject) {
    var style = '';
    data = data.replace(/<style.*?>([\s\S]*?)<\/style>/gi, function () {
      style += arguments[1];
      return '';
    });
    var links = [];
    data = data.replace(/<link.*?href\s*=\s*[\'\"](.*?)[\'\"].*?\/*>[\s\S]*?(<\/link>)*/gi, function () {
      if (/^https*:\/\/.*?\.css$/.test(arguments[1])) links.push(arguments[1]);
      return '';
    })
    for (var link of links) {
      try {
        style += await request(link);
      } catch (e) {
        continue;
      }
    }
    var handler = new DomHandler(style, options);
    new Parser(handler, options, function (res) {
      resolve(res);
    }).write(data);
  })
}
module.exports = html2nodes;