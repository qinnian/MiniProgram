//DomHandler.js
const CssHandler = require('./CssHandler.js');
const Common = 1, Rich = 2;
const trustTag = {
  a: Rich,
  abbr: Common,
  address: Common,
  audio: Rich,
  b: Common,
  blockquote: Common,
  br: Rich,
  code: Rich,
  col: Rich,
  colgroup: Rich,
  dd: Common,
  del: Common,
  div: Common,
  dl: Common,
  dt: Common,
  em: Common,
  embed: Rich,
  fieldset: Common,
  font: Common,
  frame: Common,
  h1: Rich,
  h2: Rich,
  h3: Rich,
  h4: Rich,
  h5: Rich,
  h6: Rich,
  hr: Rich,
  i: Common,
  iframe: Common,
  img: Common,
  ins: Common,
  label: Common,
  legend: Common,
  li: Rich,
  link: Rich,
  object: Rich,
  ol: Rich,
  p: Common,
  param: Rich,
  pre: Common,
  q: Common,
  qqmusic: Rich,
  source: Rich,
  span: Common,
  strong: Common,
  sub: Rich,
  sup: Rich,
  table: Rich,
  tbody: Rich,
  td: Rich,
  tfoot: Rich,
  th: Rich,
  thead: Rich,
  tr: Rich,
  u: Common,
  ul: Rich,
  video: Common
};
const textTag = {
  b: true,
  del: true,
  em: true,
  i: true,
  ins: true,
  q: true,
  span: true,
  strong: true
};
const ignoreTag = {
  head: true,
  area: true,
  base: true,
  basefont: true,
  command: true,
  input: true,
  textarea: true,
  isindex: true,
  keygen: true,
  meta: true,
  track: true,
  wbr: true,
  path: true,
  circle: true,
  ellipse: true,
  line: true,
  rect: true,
  use: true,
  stop: true,
  polyline: true,
  polygon: true,
  map: true,
  canvas: true,
};

function DomHandler(style, options = {}) {
  this.imgList = [];
  this.nodes = [];
  this._mediaNum = 0;
  this._maxDepth = options.maxDepth || 0;
  this._domain = options.domain;
  this._CssHandler = new CssHandler(style, options.tagStyle);
  this._tagStack = [];
  this._ignore = false;
  this._frames = [];
  this._qqMusic = [];
}
DomHandler.prototype._addDomElement = function (element) {
  var parent = this._tagStack[this._tagStack.length - 1];
  var siblings = parent ? parent.children : this.nodes;
  siblings.push(element);
};
DomHandler.prototype._bubbling = function () {
  if (this._maxDepth <= 0 || this._tagStack.length < this._maxDepth) {
    for (var i = this._tagStack.length - 1; i >= 0; i--) {
      if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
      else return this._tagStack[i].name;
    }
  }
};
DomHandler.prototype.onopentag = function (name, attrs) {
  if (ignoreTag[name]) return;
  var element = {
    children: []
  };
  if (this._ignore) {
    this._tagStack.push(element);
    return;
  }
  if (name == 'pre') attrs.class = attrs.class ? (attrs.class + ' hljs') : 'hljs';
  attrs.style = this._CssHandler.match(name, attrs, element) + attrs.style;
  delete attrs.class;
  delete attrs.id;
  var display = attrs.style.match(/display\s*:[^;]*/gi);
  if (display && display.length == 1 && display[0].match(/display\s*:\s*([^;]*)/i)[1].toLowerCase() == 'none') {
    this._ignore = true;
    element.none = true;
    this._tagStack.push(element);
    return;
  }
  if (!trustTag[name]) name = 'div';
  if (textTag[name]) element.continue = true;
  if (attrs['data-src']) {
    attrs.src = attrs.src || attrs['data-src'];
    delete attrs['data-src'];
  }
  switch (name) {
    case 'div': case 'p':
      if (attrs.align) {
        attrs.style += (';text-align:' + attrs.align);
        delete attrs.align;
      }
      break;
    case 'img':
      if (attrs.width) {
        attrs.style = 'width:' + attrs.width + ';' + attrs.style;
        delete attrs.width;
      }
      if (!attrs.hasOwnProperty('ignore') && attrs.src) {
        this.imgList.push(attrs.src);
        if (this._bubbling() == 'a') attrs.ignore = "";
      };
      attrs.style = 'max-width:100%;' + attrs.style;
      break;
    case 'font':
      name = 'span';
      if (attrs.color) {
        attrs.style += (';color:' + attrs.color);
        delete attrs.color;
      }
      if (attrs.face) {
        attrs.style += (";font-family:" + attrs.face);
        delete attrs.face;
      }
      break;
    case 'a':
      element.continue = true;
      attrs.style = 'color:#366092;display:inline;word-break:break-all;overflow:auto;' + attrs.style;
      this._bubbling();
      break;
    case 'video': case 'audio':
      attrs.loop = attrs.hasOwnProperty('loop');
      attrs.controls = attrs.hasOwnProperty('controls');
      attrs.autoplay = attrs.hasOwnProperty('autoplay');
      if (name == 'video') attrs.muted = attrs.hasOwnProperty('muted');
      attrs.id = ('media' + (++this._mediaNum));
      attrs.source = [];
      if (attrs.src) attrs.source.push(attrs.src);
      if (!attrs.controls && !attrs.autoplay)
        console.warn('存在没有controls属性的' + name + '标签，可能导致无法播放', attrs);
      this._bubbling();
      break;
    case 'source':
      var parent = this._tagStack[this._tagStack.length - 1];
      if (parent && (parent.name == 'video' || parent.name == 'audio')) {
        parent.attrs.source.push(attrs.src);
        if (!parent.attrs.src) parent.attrs.src = attrs.src;
      }
      this._tagStack.push(element);
      return;
    case 'qqmusic':
      name = 'audio';
      attrs.poster = attrs.albumurl;
      delete attrs.albumurl;
      attrs.name = attrs["music_name"].replace(/&nbsp;/g, '\u00A0');
      delete attrs["music_name"];
      attrs.author = attrs.singer.replace(/&nbsp;/g, '\u00A0');;
      delete attrs.singer;
      attrs.controls = true;
      this._qqMusic.push(element);
      for (var i = this._tagStack.length - 1; i >= 0; i--) {
        if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
        else break;
      }
      break;
    case 'embed': case 'object':
      var type = '';
      if (name == 'embed') type = attrs.src ? attrs.src.split('.')[attrs.src.split('.').length - 1] : '';
      else if (name == 'object') {
        type = attrs.data ? attrs.data.split('.')[attrs.data.split('.').length - 1] : '';
        attrs.src = attrs.data;
        delete attrs.data;
      }
      type = type.toLowerCase();
      if (!type) {
        element.name = name;
        element.attrs = attrs;
        this._tagStack.push(element);
        return;
      }
      else if (type == 'mp4' || type == 'mov' || type == 'm4v' || type == '3gp' || type == 'avi' || type == 'm3u8' || type == 'webm') {
        name = 'video';
        attrs.id = ('video' + (++this.videoNum));
        for (var i = this._tagStack.length - 1; i >= 0; i--) {
          if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
          else break;
        }
      }
      else if (type == 'mp3' || type == 'aac') {
        name = 'audio';
        for (var i = this._tagStack.length - 1; i >= 0; i--) {
          if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
          else break;
        }
      }
      else if (type == 'png' || type == 'jpg' || type == 'jpeg') {
        name = 'img';
        for (var i = this._tagStack.length - 1; i >= 0; i--) {
          if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
          else break;
        }
      }
      else {
        element.name = name;
        element.attrs = attrs;
        this._tagStack.push(element);
        return;
      }
      break;
    case 'param':
      var parent = this._tagStack.pop();
      if (!parent || parent.name != 'object');
      else if (attrs.name.toLowerCase() == 'src') {
        if (attrs.value[0] == '/') {
          if (attrs.value[1] == '/') attrs.value = this._domain.split('//')[0] + attrs.value;
          else attrs.value = this._domain + attrs.value;
        }
        var type = attrs.value ? attrs.value.split('.')[attrs.value.split('.').length - 1] : '';
        type = type.toLowerCase();
        if (!type);
        else if (type == 'mp4' || type == 'mov' || type == 'm4v' || type == '3gp' || type == 'avi' || type == 'm3u8' || type == 'webm') {
          parent.name = 'video';
          parent.attrs.src = attrs.value;
          parent.attrs.id = ('video' + (++this.videoNum));
          for (var i = this._tagStack.length - 1; i >= 0; i--) {
            if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
            else break;
          }
          this._addDomElement(parent);
        }
        else if (type == 'mp3' || type == 'aac') {
          parent.name = 'audio';
          parent.attrs.src = attrs.value;
          for (var i = this._tagStack.length - 1; i >= 0; i--) {
            if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
            else break;
          }
          this._addDomElement(parent);
        }
        else if (type == 'png' || type == 'jpg' || type == 'jpeg') {
          parent.name = 'img';
          parent.attrs.src = attrs.value;
          for (var i = this._tagStack.length - 1; i >= 0; i--) {
            if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
            else break;
          }
          this._addDomElement(parent);
        }
      }
      else parent.attrs[attrs.name] = attrs.value;
      this._tagStack.push(parent);
      this._tagStack.push(element);
      return;
    case 'u':
      name = 'span';
      attrs.style = 'text-decoration:underline;' + attrs.style;
      break;
    case 'iframe': case 'frame':
      name = 'div';
      if (attrs.width) attrs.style += (';width:' + attrs.width + (/[^\d]/.test(attrs.width) ? '' : 'px'));
      if (attrs.height) attrs.style += (';height:' + attrs.height + (/[^\d]/.test(attrs.height) ? '' : 'px'));
      if (attrs.marginheight) attrs.style += (';margin-top:' + attrs.marginheight + ';margin-bottom:' + attrs.marginheight);
      if (attrs.marginwidth) attrs.style += (';margin-left:' + attrs.marginwidth + ';margin-right:' + attrs.marginwidth);
      if (attrs.hasOwnProperty('scrolling')) {
        if (attrs.scrolling == 'yes') attrs.style += ';overflow:scroll';
        else if (attrs.scrolling == 'auto') attrs.style += ';overflow:auto';
        else if (attrs.scrolling == 'no') attrs.style += ';overflow:hidden';
        delete attrs.scrolling;
      }
      element.continue = true;
      for (var i = this._tagStack.length - 1; i >= 0; i--) {
        if (trustTag[this._tagStack[i].name] == Common) this._tagStack[i].continue = true;
        else break;
      }
      delete attrs.width;
      delete attrs.height
      delete attrs.marginheight;
      delete attrs.marginwidth;
      this._frames.push(element);
      break;
  }
  element.name = name;
  element.attrs = attrs;
  this._addDomElement(element);
  this._tagStack.push(element);
};
DomHandler.prototype.ontext = function (data) {
  var lastTag;
  if (!this._tagStack.length && this.nodes.length && (lastTag = this.nodes[this.nodes.length - 1]).type === 'text') {
    lastTag.data += data;
  } else {
    if (
      this._tagStack.length &&
      (lastTag = this._tagStack[this._tagStack.length - 1]) &&
      (lastTag = lastTag.children[lastTag.children.length - 1]) &&
      lastTag.type === 'text'
    ) {
      lastTag.data += data;
    } else if (data) {
      var element = {
        text: data,
        type: 'text'
      };
      this._addDomElement(element);
    }
  }
};
DomHandler.prototype.onclosetag = function (name) {
  if (!ignoreTag[name]) {
    var element = this._tagStack.pop();
    if (element.none) this._ignore = false;
    if (element.hasOwnProperty('i')) {
      this._CssHandler.pop(element.i, element.index);
      delete element.i;
      delete element.index;
    }
  }
};
module.exports = DomHandler;