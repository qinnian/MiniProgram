//CssHandler.js
function CssHandler(style, tagStyle) {
    this._style = new CssTokenizer(style, tagStyle).parse();
}
function _matchClass(match_class, selector_class) {
    if (!match_class || !match_class.length || !selector_class || !selector_class.length) return false;
    else if (match_class.length == 1 && selector_class.length == 1) {
        if (match_class[0] == selector_class[0]) return true;
        else return false;
    }
    else if (match_class.length < selector_class.length) return false;
    else {
        for (var i of selector_class) {
            var matched = false;
            for (var j of match_class) {
                if (j == i) matched = true;
            }
            if (matched == false) return false;
        }
        return true;
    }
}
function _matchId(match_id, selector_id) {
    if (!match_id || !match_id.length || !selector_id || !selector_id.length) return false;
    if (match_id.length == 1 && selector_id.length == 1) {
        if (match_id[0] == selector_id[0]) return true;
        else return false;
    }
    else if (match_id.length < selector_id.length) return false;
    else {
        for (var i of selector_id) {
            var matched = false;
            for (var j of match_id) {
                if (j == i) matched = true;
            }
            if (matched == false) return false;
        }
        return true;
    }
}
function matchClass(match_name, match_class, match_id, selector) {
    var selector_name = selector.match(/^[^\.#\[\]\s]+/g);
    var selector_class = selector.match(/\.[^\.#\[\]\s]+/g);
    var selector_id = selector.match(/#[^\.#\[\]\s]+/g);
    if (selector == '*') return true;
    if (selector_name && match_name != selector_name.join('')) return false;
    if (selector_class && !_matchClass(match_class, selector_class)) return false;
    if (selector_id && !_matchId(match_id, selector_id)) return false;
    return true;
}
CssHandler.prototype.match = function (name, attrs, element) {
    var match_class = [];
    if (attrs.class) {
        var matchs = attrs.class.split(/\s/);
        for (var i of matchs) {
            match_class.push('.' + i);
        }
    }
    var match_id = [];
    if (attrs.id) {
        var matchs = attrs.id.split(/\s/);
        for (var i of matchs) {
            match_id.push('#' + i);
        }
    }
    var matched = '',
        key, sign = false,
        item;
    for (var i = 0; i < this._style.length; i++) {
        item = this._style[i];
        if (item.key[0] == '>') {
            key = item.key.substring(1);
            sign = true;
        } else {
            key = item.key;
            sign = false;
        }
        if (matchClass(name, match_class, match_id, key)) {
            if (!item.hasOwnProperty('index') || item.index == (item.list.length - 1)) {
                matched += (';' + item.content);
            }
            else {
                element.i = i;
                element.index = item.index;
                item.index++;
                item.key = item.list[item.index];
            }
        } else if (sign) {
            element.i = i;
            element.index = item.index;
            item.index--;
            item.key = item.list[item.index];
        }
    }
    return matched + ';';
}
CssHandler.prototype.pop = function (i, index) {
    this._style[i].key = this._style[i].list[index];
    this._style[i].index = index;
}
function CssTokenizer(style = '', tagStyle = {}) {
    this.res = this.initClass(tagStyle);
    this._state = "SPACE";
    this._buffer = style;
    this._sectionStart = 0;
    this._index = 0;
    this._name = '';
    this._content = '';
}
CssTokenizer.prototype.initClass = function (tagStyle) {
    tagStyle.blockquote = tagStyle.blockquote || 'background-color:#f6f6f6;border-left:3px solid #dbdbdb;color:#6c6c6c;padding:5px 0 5px 10px';
    tagStyle.code = tagStyle.code || 'padding:0 1px 0 1px;margin-left:2px;margin-right:2px;background-color:#f8f8f8;border:1px solid #cccccc;border-radius:3px';
    tagStyle.pre = tagStyle.pre || 'background-color:#f6f8fa;padding:5px;border-radius:5px;font-family:monospace;white-space:pre;overflow:scroll';
    tagStyle.address = 'font-style:italic;' + (tagStyle.address || '');
    tagStyle.center = 'text-align:center;' + (tagStyle.center || '');
    var res = [];
    for (let item in tagStyle) {
        res.push({
            key: item,
            content: tagStyle[item]
        })
    }
    return res;
};
CssTokenizer.prototype.setClass = function (key) {
    if (!/[\s>]/.test(key)) {
        this.res.push({
            key: key,
            content: this._content
        })
    } else {
        key = key.replace(/\s*>\s*/g, ' >').split(/\s/);
        this.res.push({
            key: key[0],
            index: 0,
            list: key,
            content: this._content
        })
    }
};
CssTokenizer.prototype.SPACE = function (c) {
    if (/[a-zA-Z.#]/.test(c)) {
        this._sectionStart = this._index;
        this._state = "InName";
    } else if (c == '@') this._state = "Ignore1";
    else if (c == '/') this._state = "BeforeComment";
};
CssTokenizer.prototype.BeforeComment = function (c) {
    if (c == '*') this._state = "InComment";
    else {
        this._index--;
        this._state = "SPACE";
    }
};
CssTokenizer.prototype.InComment = function (c) {
    if (c == '*') this._state = "AfterComment";
};
CssTokenizer.prototype.AfterComment = function (c) {
    if (c == '/') this._state = "SPACE";
    else {
        this._index--;
        this._state = "InComment"
    }
};
CssTokenizer.prototype.InName = function (c) {
    if (c == '{') {
        this._name = this._buffer.substring(this._sectionStart, this._index);
        this._sectionStart = this._index + 1;
        this._state = "InContent";
    } else if (/\s/.test(c)) {
        this._name = this._buffer.substring(this._sectionStart, this._index);
        this._state = "NameSpace";
    } else if (/[:\[]/.test(c)) this._state = "Ignore1";
};
CssTokenizer.prototype.NameSpace = function (c) {
    if (c == '{') {
        this._sectionStart = this._index + 1;
        this._state = "InContent";
    } else if (!/\s/.test(c)) {
        this._state = "InName";
    }
};
CssTokenizer.prototype.InContent = function (c) {
    if (c == '}') {
        this._content = this._buffer.substring(this._sectionStart, this._index);
        let items = this._name.split(/\s*,\s*/);
        for (let item of items)
            this.setClass(item);
        this._state = "SPACE";
    }
};
CssTokenizer.prototype.Ignore1 = function (c) {
    if (c == ';') {
        this._state = "SPACE";
        this._sectionStart = this._index + 1;
    } else if (c == '{') this._state = "Ignore2";
};
CssTokenizer.prototype.Ignore2 = function (c) {
    if (c == '}') {
        this._state = "SPACE";
        this._sectionStart = this._index + 1;
    } else if (c == '{') this._state = "Ignore3";
};
CssTokenizer.prototype.Ignore3 = function (c) {
    if (c == '}') this._state = "Ignore2";
};
CssTokenizer.prototype.parse = function () {
    for (; this._index < this._buffer.length; this._index++)
        this[this._state](this._buffer[this._index]);
    return this.res;
};
module.exports = CssHandler;